/*
 * Here comes the text of your license
 * Each line should be prefixed with  * 
 */
package AiSpindleTest;

import AiSpindle.FullPolygon;
import AiSpindle.PointPair;
import AiSpindle.SpindleContourAnalyzer;
import AiSpindle.SpindleIdentifier;
import ij.CompositeImage;
import ij.IJ;
import ij.ImageJ;
import ij.ImagePlus;
import ij.gui.ImageWindow;
import ij.gui.Line;
import ij.gui.Overlay;
import ij.gui.PolygonRoi;
import ij.gui.Roi;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JFileChooser;

/**
 *
 * @author Mutt
 */
public class AiSpindleTest extends javax.swing.JFrame {

    private CompositeImage imp=null;


    /**
     * Creates new form AiSpindleTest
     */

    public AiSpindleTest() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseFileBn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        mtChannelCb = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        dnaChannelCb = new javax.swing.JComboBox<>();
        runBn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chooseFileBn.setText("Choose File");
        chooseFileBn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileBnActionPerformed(evt);
            }
        });

        jLabel1.setText("Microtubule Channel");

        mtChannelCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", " " }));

        jLabel2.setText("DNA Channel");

        dnaChannelCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", " " }));

        runBn.setText("Analyze");
        runBn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chooseFileBn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(runBn)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(10, 10, 10)
                                    .addComponent(mtChannelCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dnaChannelCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chooseFileBn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(mtChannelCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dnaChannelCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(runBn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseFileBnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileBnActionPerformed
        JFileChooser chooser = new JFileChooser();

        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String fileName = chooser.getSelectedFile().getAbsolutePath();
            imp = new CompositeImage(new ImagePlus(fileName));
            imp.updateAndDraw();
            imp.setDisplayMode(IJ.COMPOSITE);
            imp.show();
            ImageWindow iw=imp.getWindow();

            iw.addWindowListener(new WindowAdapter(){
                @Override
                public void windowClosing(WindowEvent e){
                    imp=null;
                }
            });


            System.out.println("You chose to open this file: "
                    + chooser.getSelectedFile().getName());
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_chooseFileBnActionPerformed

    private void runBnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBnActionPerformed
        if(imp==null)  return;
        Overlay overlay = new Overlay();
            SpindleIdentifier si = new SpindleIdentifier(imp, mtChannelCb.getSelectedIndex() + 1, dnaChannelCb.getSelectedIndex() + 1);            
            for (SpindleContourAnalyzer b : si.getSpindles()) {
                // Point[] points = b.getSpindleLongAxisPoints();
                //overlay.add(new Line(points[0].x, points[0].y, points[1].x, points[1].y), "line");
                for (FullPolygon mt : b.mtFullPolygons) {
                    overlay.add(new PolygonRoi(mt.getPolygon(), Roi.POLYGON), "Spindle");
                }
                for (PointPair p : b.mtAxis) {
                    overlay.add(new Line(p.A.x, p.A.y, p.B.x, p.B.y), "Axis");
                }
                for (FullPolygon dna : b.dnaFullPolygons) {
                    overlay.add(new PolygonRoi(dna.getPolygon(), Roi.POLYGON), "DNA");
                }
                for (PointPair p : b.dnaAxis) {
                    overlay.add(new Line(p.A.x, p.A.y, p.B.x, p.B.y), "Axis");
                }
            }

            imp.setOverlay(overlay);
    }//GEN-LAST:event_runBnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AiSpindleTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AiSpindleTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AiSpindleTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AiSpindleTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AiSpindleTest().setVisible(true);
            }
        });
        java.awt.EventQueue.invokeLater(() -> {
            ImageJ imj = new ImageJ(ImageJ.STANDALONE);
            imj.setVisible(true);
            imj.exitWhenQuitting(true);

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseFileBn;
    private javax.swing.JComboBox<String> dnaChannelCb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox<String> mtChannelCb;
    private javax.swing.JButton runBn;
    // End of variables declaration//GEN-END:variables
}
